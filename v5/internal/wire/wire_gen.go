// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire

package wire

import (
	"github.com/go-kratos/kratos/v2/log"
	"github.com/yourusername/inventory-service/internal/conf"
	"github.com/yourusername/inventory-service/internal/data"
	"github.com/yourusername/inventory-service/internal/server"
	"github.com/yourusername/inventory-service/internal/service"
)

// InitializeApp initializes the application components.
func InitializeApp(cfg *conf.Config, logger log.Logger) (*App, func(), error) {
	data, cleanupData, err := initData(cfg, logger)
	if err != nil {
		return nil, nil, err
	}

	svc, cleanupService, err := initService(cfg, data, logger)
	if err != nil {
		return nil, nil, err
	}

	servers, cleanupServers, err := initServers(cfg, svc, logger)
	if err != nil {
		return nil, nil, err
	}

	return &App{
		Data:    data,
		Service: svc,
		Servers: servers,
	}, func() {
		cleanupServers()
		cleanupService()
		cleanupData()
	}, nil
}

func initData(cfg *conf.Config, logger log.Logger) (*data.Data, func(), error) {
	data, err := data.NewData(&cfg.Data, logger)
	if err != nil {
		return nil, nil, err
	}
	return data, func() {
		data.Close()
	}, nil
}

func initService(cfg *conf.Config, data *data.Data, logger log.Logger) (*service.Service, func(), error) {
	svc, err := service.NewService(data, logger)
	if err != nil {
		return nil, nil, err
	}
	return svc, func() {
		svc.Close()
	}, nil
}

func initServers(cfg *conf.Config, svc *service.Service, logger log.Logger) ([]*server.Server, func(), error) {
	httpServer, err := server.NewHTTPServer(&cfg.Server.HTTP, svc, logger)
	if err != nil {
		return nil, nil, err
	}

	grpcServer, err := server.NewGRPCServer(&cfg.Server.GRPC, svc, logger)
	if err != nil {
		return nil, nil, err
	}

	thriftServer, err := server.NewThriftServer(&cfg.Server.Thrift, svc, logger)
	if err != nil {
		return nil, nil, err
	}

	servers := []*server.Server{
		httpServer,
		grpcServer,
		thriftServer,
	}

	return servers, func() {
		for _, s := range servers {
			s.Stop()
		}
	}, nil
}
