// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire

package wire

import (
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/go-kratos/kratos/v2/transport/http"
	"github.com/go-kratos/kratos/v2/transport/thrift"
	"github.com/google/wire"
	"gorm.io/gorm"

	"inventory/internal/conf"
	"inventory/internal/data"
	"inventory/internal/server"
	"inventory/internal/service"
)

// ProviderSet is a provider set for wire
var ProviderSet = wire.NewSet(
	conf.ProviderSet,
	data.ProviderSet,
	server.ProviderSet,
	service.ProviderSet,
	NewApp,
)

// NewApp creates a new inventory application.
func NewApp(c *conf.Config, logger log.Logger, data *data.Data, svc *service.Service) (*App, error) {
	httpSrv := http.NewServer(
		http.Address(c.HTTP.Addr),
		http.WithLogger(logger),
	)
	grpcSrv := grpc.NewServer(
		grpc.Address(c.GRPC.Addr),
		grpc.WithLogger(logger),
	)
	thriftSrv := thrift.NewServer(
		thrift.Address(c.Thrift.Addr),
		thrift.WithLogger(logger),
	)

	app := &App{
		Config:    c,
		Logger:    logger,
		Data:      data,
		Service:   svc,
		HTTP:      httpSrv,
		GRPC:      grpcSrv,
		Thrift:    thriftSrv,
	}

	return app, nil
}

// App is the main application.
type App struct {
	Config    *conf.Config
	Logger    log.Logger
	Data      *data.Data
	Service   *service.Service
	HTTP      *http.Server
	GRPC      *grpc.Server
	Thrift    *thrift.Server
}

// Start starts the application.
func (a *App) Start() error {
	return a.HTTP.Start()
}

// Stop stops the application.
func (a *App) Stop() error {
	return a.HTTP.Stop()
}

// NewData creates a new data layer.
func NewData(c *conf.DataConfig, logger log.Logger) (*data.Data, error) {
	db, err := gorm.Open(c.Database.Driver, c.Database.Source)
	if err != nil {
		return nil, err
	}
	return data.NewData(db, logger), nil
}

// NewService creates a new service layer.
func NewService(data *data.Data, logger log.Logger) (*service.Service, error) {
	return service.NewService(data, logger), nil
}
